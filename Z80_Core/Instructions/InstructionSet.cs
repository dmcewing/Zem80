using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Z80.Core
{
    public static class InstructionSet
    {
        public static IDictionary<int, Instruction> Instructions = new Dictionary<int, Instruction>();
        public static IDictionary<string, Instruction> InstructionsByMnemonic = new Dictionary<string, Instruction>();

        public static Instruction NOP => Instructions[0];

        public static void Build()
        {
            if (Instructions.Count == 0)
            {
                var instructions = new List<Instruction>();

                #region instruction_build
                instructions.Add(new Instruction("00", "NOP", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("01", "LD BC,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("02", "LD (BC),A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("03", "INC BC", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("04", "INC B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("05", "DEC B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("06", "LD B,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("07", "RLCA", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("08", "EX AF,AF'", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("09", "ADD HL,BC", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("0A", "LD A,(BC)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("0B", "DEC BC", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("0C", "INC C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("0D", "DEC C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("0E", "LD C,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("0F", "RRCA", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("10", "DJNZ o", ArgumentType.Displacement, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("11", "LD DE,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("12", "LD (DE),A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("13", "INC DE", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("14", "INC D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("15", "DEC D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("16", "LD D,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("17", "RLA", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("18", "JR o", ArgumentType.Displacement, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction("19", "ADD HL,DE", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("1A", "LD A,(DE)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("1B", "DEC DE", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("1C", "INC E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("1D", "DEC E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("1E", "LD E,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("1F", "RRA", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("20", "JR NZ,o", ArgumentType.Displacement, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("21", "LD HL,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("22", "LD (nn),HL", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWriteLow, 3, false), new MachineCycle(MachineCycleType.MemoryWriteHigh, 3, false) }));
                instructions.Add(new Instruction("23", "INC HL", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("24", "INC H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("25", "DEC H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("26", "LD H,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("27", "DAA", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("28", "JR Z,o", ArgumentType.Displacement, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("29", "ADD HL,HL", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("2A", "LD HL,(nn)", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("2B", "DEC HL", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("2C", "INC L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("2D", "DEC L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("2E", "LD L,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("2F", "CPL", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("30", "JR NC,o", ArgumentType.Displacement, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("31", "LD SP,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("32", "LD (nn),A", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("33", "INC SP", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("34", "INC (HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("35", "DEC (HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("36", "LD (HL),n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("37", "SCF", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("38", "JR C,o", ArgumentType.Displacement, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("39", "ADD HL,SP", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("3A", "LD A,(nn)", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("3B", "DEC SP", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("3C", "INC A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("3D", "DEC A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("3E", "LD A,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("3F", "CCF", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("40", "LD B,B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("41", "LD B,C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("42", "LD B,D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("43", "LD B,E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("44", "LD B,H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("45", "LD B,L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("47", "LD B,A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("46", "LD B,(HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("48", "LD C,B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("49", "LD C,C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4A", "LD C,D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4B", "LD C,E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4C", "LD C,H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4D", "LD C,L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4F", "LD C,A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4E", "LD C,(HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("50", "LD D,B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("51", "LD D,C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("52", "LD D,D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("53", "LD D,E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("54", "LD D,H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("55", "LD D,L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("57", "LD D,A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("56", "LD D,(HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("58", "LD E,B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("59", "LD E,C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5A", "LD E,D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5B", "LD E,E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5C", "LD E,H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5D", "LD E,L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5F", "LD E,A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5E", "LD E,(HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("60", "LD H,B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("61", "LD H,C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("62", "LD H,D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("63", "LD H,E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("64", "LD H,H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("65", "LD H,L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("67", "LD H,A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("66", "LD H,(HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("68", "LD L,B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("69", "LD L,C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6A", "LD L,D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6B", "LD L,E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6C", "LD L,H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6D", "LD L,L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6F", "LD L,A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6E", "LD L,(HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("70", "LD (HL),B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("71", "LD (HL),C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("72", "LD (HL),D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("73", "LD (HL),E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("74", "LD (HL),H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("75", "LD (HL),L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("77", "LD (HL),A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("76", "HALT", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("78", "LD A,B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("79", "LD A,C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7A", "LD A,D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7B", "LD A,E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7C", "LD A,H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7D", "LD A,L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7F", "LD A,A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7E", "LD A,(HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("80", "ADD A,B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("81", "ADD A,C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("82", "ADD A,D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("83", "ADD A,E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("84", "ADD A,H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("85", "ADD A,L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("87", "ADD A,A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("86", "ADD A,(HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("88", "ADC A,B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("89", "ADC A,C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8A", "ADC A,D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8B", "ADC A,E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8C", "ADC A,H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8D", "ADC A,L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8F", "ADC A,A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8E", "ADC A,(HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("90", "SUB B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("91", "SUB C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("92", "SUB D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("93", "SUB E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("94", "SUB H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("95", "SUB L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("97", "SUB A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("96", "SUB (HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("98", "SBC A,B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("99", "SBC A,C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9A", "SBC A,D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9B", "SBC A,E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9C", "SBC A,H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9D", "SBC A,L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9F", "SBC A,A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9E", "SBC A,(HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("A0", "AND B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A1", "AND C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A2", "AND D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A3", "AND E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A4", "AND H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A5", "AND L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A7", "AND A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A6", "AND (HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("A8", "XOR B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A9", "XOR C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AA", "XOR D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AB", "XOR E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AC", "XOR H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AD", "XOR L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AF", "XOR A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AE", "XOR (HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("B0", "OR B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B1", "OR C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B2", "OR D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B3", "OR E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B4", "OR H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B5", "OR L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B7", "OR A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B6", "OR (HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("B8", "CP B", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B9", "CP C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BA", "CP D", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BB", "CP E", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BC", "CP H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BD", "CP L", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BF", "CP A", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BE", "CP (HL)", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("C0", "RET NZ", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("C1", "POP BC", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false) }));
                instructions.Add(new Instruction("C2", "JP NZ,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("C3", "JP nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("C4", "CALL NZ,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, true), new MachineCycle(MachineCycleType.StackWriteLow, 3, true) }));
                instructions.Add(new Instruction("C5", "PUSH BC", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("C6", "ADD A,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("C7", "RST 0", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("C8", "RET Z", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("C9", "RET", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("CA", "JP Z,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("CC", "CALL Z,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, true), new MachineCycle(MachineCycleType.StackWriteLow, 3, true) }));
                instructions.Add(new Instruction("CD", "CALL nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, true), new MachineCycle(MachineCycleType.StackWriteLow, 3, true) }));
                instructions.Add(new Instruction("CE", "ADC A,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 3, false) }));
                instructions.Add(new Instruction("CF", "RST 8H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("D0", "RET NC", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("D1", "POP DE", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false) }));
                instructions.Add(new Instruction("D2", "JP NC,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("D3", "OUT (n),A", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("D4", "CALL NC,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, true), new MachineCycle(MachineCycleType.StackWriteLow, 3, true) }));
                instructions.Add(new Instruction("D5", "PUSH DE", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("D6", "SUB n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("D7", "RST 10H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("D8", "RET C", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("D9", "EXX", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DA", "JP C,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("DB", "IN A,(n)", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("DC", "CALL C,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, true), new MachineCycle(MachineCycleType.StackWriteLow, 3, true) }));
                instructions.Add(new Instruction("DE", "SBC A,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 3, false) }));
                instructions.Add(new Instruction("DF", "RST 18H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("E0", "RET PO", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("E1", "POP HL", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false) }));
                instructions.Add(new Instruction("E2", "JP PO,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("E3", "EX (SP),HL", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 4, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 5, false) }));
                instructions.Add(new Instruction("E4", "CALL PO,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, true), new MachineCycle(MachineCycleType.StackWriteLow, 3, true) }));
                instructions.Add(new Instruction("E5", "PUSH HL", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("E6", "AND n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("E7", "RST 20H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("E8", "RET PE", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("E9", "JP HL", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("EA", "JP PE,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("EB", "EX DE,HL", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("EC", "CALL PE,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, true), new MachineCycle(MachineCycleType.StackWriteLow, 3, true) }));
                instructions.Add(new Instruction("EE", "XOR n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("EF", "RST 28H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("F0", "RET P", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("F1", "POP AF", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false) }));
                instructions.Add(new Instruction("F2", "JP P,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("F3", "DI", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("F4", "CALL P,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, true), new MachineCycle(MachineCycleType.StackWriteLow, 3, true) }));
                instructions.Add(new Instruction("F5", "PUSH AF", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("F6", "OR n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("F7", "RST 30H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("F8", "RET M", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("F9", "LD SP,HL", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("FA", "JP M,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("FB", "EI", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FC", "CALL M,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, true), new MachineCycle(MachineCycleType.StackWriteLow, 3, true) }));
                instructions.Add(new Instruction("FE", "CP n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("FF", "RST 38H", ArgumentType.None, ArgumentType.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("CB00", "RLC B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB01", "RLC C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB02", "RLC D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB03", "RLC E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB04", "RLC H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB05", "RLC L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB07", "RLC A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB06", "RLC (HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB08", "RRC B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB09", "RRC C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0A", "RRC D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0B", "RRC E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0C", "RRC H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0D", "RRC L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0F", "RRC A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0E", "RRC (HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB10", "RL B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB11", "RL C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB12", "RL D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB13", "RL E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB14", "RL H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB15", "RL L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB17", "RL A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB16", "RL (HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB18", "RR B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB19", "RR C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1A", "RR D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1B", "RR E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1C", "RR H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1D", "RR L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1F", "RR A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1E", "RR (HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB20", "SLA B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB21", "SLA C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB22", "SLA D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB23", "SLA E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB24", "SLA H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB25", "SLA L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB27", "SLA A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB26", "SLA (HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB28", "SRA B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB29", "SRA C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2A", "SRA D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2B", "SRA E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2C", "SRA H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2D", "SRA L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2F", "SRA A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2E", "SRA (HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB30", "SLL B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB31", "SLL C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB32", "SLL D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB33", "SLL E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB34", "SLL H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB35", "SLL L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB37", "SLL A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB36", "SLL (HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB38", "SRL B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB39", "SRL C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3A", "SRL D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3B", "SRL E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3C", "SRL H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3D", "SRL L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3F", "SRL A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3E", "SRL (HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB47", "BIT 0,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB4F", "BIT 1,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB57", "BIT 2,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB5F", "BIT 3,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB67", "BIT 4,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB6F", "BIT 5,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB77", "BIT 6,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB7F", "BIT 7,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB40", "BIT 0,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB48", "BIT 1,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB50", "BIT 2,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB58", "BIT 3,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB60", "BIT 4,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB68", "BIT 5,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB70", "BIT 6,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB78", "BIT 7,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB41", "BIT 0,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB49", "BIT 1,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB51", "BIT 2,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB59", "BIT 3,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB61", "BIT 4,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB69", "BIT 5,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB71", "BIT 6,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB79", "BIT 7,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB42", "BIT 0,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB4A", "BIT 1,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB52", "BIT 2,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB5A", "BIT 3,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB62", "BIT 4,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB6A", "BIT 5,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB72", "BIT 6,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB7A", "BIT 7,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB43", "BIT 0,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB4B", "BIT 1,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB53", "BIT 2,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB5B", "BIT 3,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB63", "BIT 4,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB6B", "BIT 5,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB73", "BIT 6,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB7B", "BIT 7,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB44", "BIT 0,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB4C", "BIT 1,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB54", "BIT 2,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB5C", "BIT 3,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB64", "BIT 4,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB6C", "BIT 5,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB74", "BIT 6,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB7C", "BIT 7,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB45", "BIT 0,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB4D", "BIT 1,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB55", "BIT 2,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB5D", "BIT 3,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB65", "BIT 4,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB6D", "BIT 5,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB75", "BIT 6,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB7D", "BIT 7,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB46", "BIT 0,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB4E", "BIT 1,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB56", "BIT 2,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB5E", "BIT 3,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB66", "BIT 4,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB6E", "BIT 5,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB76", "BIT 6,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB7E", "BIT 7,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB87", "RES 0,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB8F", "RES 1,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB97", "RES 2,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB9F", "RES 3,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA7", "RES 4,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBAF", "RES 5,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB7", "RES 6,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBBF", "RES 7,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB80", "RES 0,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB88", "RES 1,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB90", "RES 2,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB98", "RES 3,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA0", "RES 4,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA8", "RES 5,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB0", "RES 6,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB8", "RES 7,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB81", "RES 0,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB89", "RES 1,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB91", "RES 2,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB99", "RES 3,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA1", "RES 4,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA9", "RES 5,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB1", "RES 6,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB9", "RES 7,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB82", "RES 0,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB8A", "RES 1,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB92", "RES 2,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB9A", "RES 3,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA2", "RES 4,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBAA", "RES 5,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB2", "RES 6,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBBA", "RES 7,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB83", "RES 0,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB8B", "RES 1,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB93", "RES 2,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB9B", "RES 3,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA3", "RES 4,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBAB", "RES 5,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB3", "RES 6,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBBB", "RES 7,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB84", "RES 0,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB8C", "RES 1,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB94", "RES 2,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB9C", "RES 3,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA4", "RES 4,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBAC", "RES 5,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB4", "RES 6,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBBC", "RES 7,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB85", "RES 0,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB8D", "RES 1,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB95", "RES 2,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB9D", "RES 3,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA5", "RES 4,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBAD", "RES 5,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB5", "RES 6,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBBD", "RES 7,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB86", "RES 0,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB8E", "RES 1,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB96", "RES 2,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB9E", "RES 3,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBA6", "RES 4,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBAE", "RES 5,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBB6", "RES 6,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBBE", "RES 7,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBC7", "SET 0,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBCF", "SET 1,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD7", "SET 2,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBDF", "SET 3,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE7", "SET 4,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBEF", "SET 5,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF7", "SET 6,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBFF", "SET 7,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC0", "SET 0,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC8", "SET 1,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD0", "SET 2,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD8", "SET 3,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE0", "SET 4,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE8", "SET 5,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF0", "SET 6,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF8", "SET 7,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC1", "SET 0,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC9", "SET 1,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD1", "SET 2,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD9", "SET 3,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE1", "SET 4,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE9", "SET 5,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF1", "SET 6,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF9", "SET 7,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC2", "SET 0,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBCA", "SET 1,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD2", "SET 2,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBDA", "SET 3,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE2", "SET 4,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBEA", "SET 5,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF2", "SET 6,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBFA", "SET 7,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC3", "SET 0,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBCB", "SET 1,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD3", "SET 2,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBDB", "SET 3,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE3", "SET 4,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBEB", "SET 5,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF3", "SET 6,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBFB", "SET 7,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC4", "SET 0,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBCC", "SET 1,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD4", "SET 2,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBDC", "SET 3,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE4", "SET 4,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBEC", "SET 5,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF4", "SET 6,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBFC", "SET 7,H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC5", "SET 0,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBCD", "SET 1,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD5", "SET 2,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBDD", "SET 3,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE5", "SET 4,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBED", "SET 5,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF5", "SET 6,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBFD", "SET 7,L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC6", "SET 0,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBCE", "SET 1,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBD6", "SET 2,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBDE", "SET 3,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBE6", "SET 4,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBEE", "SET 5,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBF6", "SET 6,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBFE", "SET 7,(HL)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("ED40", "IN B,(C)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED41", "OUT (C),B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED42", "SBC HL,BC", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED43", "LD (nn),BC", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWriteLow, 3, false), new MachineCycle(MachineCycleType.MemoryWriteHigh, 3, false) }));
                instructions.Add(new Instruction("ED44", "NEG", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED45", "RETN", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED46", "IM 0", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED47", "LD I,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED48", "IN C,(C)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED49", "OUT (C),C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED4A", "ADC HL,BC", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED4B", "LD BC,(nn)", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED4D", "RETI", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED4F", "LD R,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false) }));
                instructions.Add(new Instruction("ED50", "IN D,(C)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED51", "OUT (C),D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED52", "SBC HL,DE", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED53", "LD (nn),DE", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWriteLow, 3, false), new MachineCycle(MachineCycleType.MemoryWriteHigh, 3, false) }));
                instructions.Add(new Instruction("ED56", "IM 1", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED57", "LD A,I", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false) }));
                instructions.Add(new Instruction("ED58", "IN E,(C)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED59", "OUT (C),E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED5A", "ADC HL,DE", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED5B", "LD DE,(nn)", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED5E", "IM 2", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED5F", "LD A,R", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false) }));
                instructions.Add(new Instruction("ED60", "IN H,(C)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED61", "OUT (C),H", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED62", "SBC HL,HL", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED67", "RRD", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("ED68", "IN L,(C)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED69", "OUT (C),L", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED6A", "ADC HL,HL", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED6F", "RLD", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("ED70", "IN F,(C)", ArgumentType.None, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED72", "SBC HL,SP", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED73", "LD (nn),SP", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWriteLow, 3, false), new MachineCycle(MachineCycleType.MemoryWriteHigh, 3, false) }));
                instructions.Add(new Instruction("ED78", "IN A,(C)", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED79", "OUT (C),A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED7A", "ADC HL,SP", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED7B", "LD SP,(nn)", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("EDA0", "LDI", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction("EDA1", "CPI", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction("EDA2", "INI", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("EDA3", "OUTI", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("EDA8", "LDD", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction("EDA9", "CPD", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction("EDAA", "IND", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("EDAB", "OUTD", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("EDB0", "LDIR", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("EDB1", "CPIR", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("EDB2", "INIR", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction("EDB3", "OTIR", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction("EDB8", "LDDR", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("EDB9", "CPDR", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("EDBA", "INDR", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction("EDBB", "OTDR", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction("DD24", "INC IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD2C", "INC IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD25", "DEC IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD2D", "DEC IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD09", "ADD IX,BC", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("DD19", "ADD IX,DE", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("DD21", "LD IX,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("DD22", "LD (nn),IX", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWriteLow, 3, false), new MachineCycle(MachineCycleType.MemoryWriteHigh, 3, false) }));
                instructions.Add(new Instruction("DD23", "INC IX", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("DD26", "LD IXh,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("DD29", "ADD IX,IX", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("DD2A", "LD IX,(nn)", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("DD2B", "DEC IX", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("DD2E", "LD IXl,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("DD34", "INC (IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD35", "DEC (IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD36", "LD (IX+o),n", ArgumentType.Displacement, ArgumentType.Immediate, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD39", "ADD IX,SP", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("DD44", "LD B,IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD45", "LD B,IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD46", "LD B,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD4C", "LD C,IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD4D", "LD C,IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD4E", "LD C,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD54", "LD D,IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD55", "LD D,IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD56", "LD D,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD5C", "LD E,IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD5D", "LD E,IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD5E", "LD E,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD60", "LD IXh,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD61", "LD IXh,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD62", "LD IXh,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD63", "LD IXh,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD64", "LD IXh,IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD65", "LD IXh,IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD67", "LD IXh,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD66", "LD H,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD68", "LD IXl,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD69", "LD IXl,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6A", "LD IXl,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6B", "LD IXl,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6C", "LD IXl,IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6D", "LD IXl,IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6F", "LD IXl,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6E", "LD L,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD70", "LD (IX+o),B", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD71", "LD (IX+o),C", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD72", "LD (IX+o),D", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD73", "LD (IX+o),E", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD74", "LD (IX+o),H", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD75", "LD (IX+o),L", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD77", "LD (IX+o),A", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD7C", "LD A,IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD7D", "LD A,IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD7E", "LD A,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD84", "ADD A,IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD85", "ADD A,IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD86", "ADD A,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD8C", "ADC A,IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD8D", "ADC A,IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD8E", "ADC A,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD94", "SUB IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD95", "SUB IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD96", "SUB (IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD9C", "SBC A,IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD9D", "SBC A,IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD9E", "SBC A,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DDA4", "AND IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDA5", "AND IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDA6", "AND (IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DDAC", "XOR IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDAD", "XOR IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDAE", "XOR (IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DDB4", "OR IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDB5", "OR IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDB6", "OR (IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DDBC", "CP IXh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDBD", "CP IXl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDBE", "CP (IX+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DDE1", "POP IX", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false) }));
                instructions.Add(new Instruction("DDE3", "EX (SP),IX", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 4, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 5, false) }));
                instructions.Add(new Instruction("DDE5", "PUSH IX", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("DDE9", "JP IX", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDF9", "LD SP,IX", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("FD24", "INC IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD2C", "INC IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD25", "DEC IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD2D", "DEC IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD09", "ADD IY,BC", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("FD19", "ADD IY,DE", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("FD21", "LD IY,nn", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("FD22", "LD (nn),IY", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWriteLow, 3, false), new MachineCycle(MachineCycleType.MemoryWriteHigh, 3, false) }));
                instructions.Add(new Instruction("FD23", "INC IY", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("FD26", "LD IYh,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("FD29", "ADD IY,IY", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("FD2A", "LD IY,(nn)", ArgumentType.ImmediateWord, ArgumentType.ImmediateWord, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("FD2B", "DEC IY", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("FD2E", "LD IYl,n", ArgumentType.Immediate, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("FD34", "INC (IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD35", "DEC (IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD36", "LD (IY+o),n", ArgumentType.Displacement, ArgumentType.Immediate, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD39", "ADD IY,SP", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("FD44", "LD B,IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD45", "LD B,IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD46", "LD B,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD4C", "LD C,IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD4D", "LD C,IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD4E", "LD C,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD54", "LD D,IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD55", "LD D,IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD56", "LD D,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD5C", "LD E,IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD5D", "LD E,IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD5E", "LD E,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD60", "LD IYh,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD61", "LD IYh,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD62", "LD IYh,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD63", "LD IYh,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD64", "LD IYh,IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD65", "LD IYh,IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD67", "LD IYh,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD66", "LD H,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD68", "LD IYl,B", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD69", "LD IYl,C", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6A", "LD IYl,D", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6B", "LD IYl,E", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6C", "LD IYl,IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6D", "LD IYl,IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6F", "LD IYl,A", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6E", "LD L,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD70", "LD (IY+o),B", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD71", "LD (IY+o),C", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD72", "LD (IY+o),D", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD73", "LD (IY+o),E", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD74", "LD (IY+o),H", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD75", "LD (IY+o),L", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD77", "LD (IY+o),A", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD7C", "LD A,IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD7D", "LD A,IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD7E", "LD A,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD84", "ADD A,IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD85", "ADD A,IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD86", "ADD A,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD8C", "ADC A,IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD8D", "ADC A,IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD8E", "ADC A,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD94", "SUB IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD95", "SUB IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD96", "SUB (IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD9C", "SBC A,IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD9D", "SBC A,IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD9E", "SBC A,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FDA4", "AND IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDA5", "AND IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDA6", "AND (IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FDAC", "XOR IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDAD", "XOR IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDAE", "XOR (IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FDB4", "OR IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDB5", "OR IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDB6", "OR (IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FDBC", "CP IYh", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDBD", "CP IYl", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDBE", "CP (IY+o)", ArgumentType.Displacement, ArgumentType.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FDE1", "POP IY", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false) }));
                instructions.Add(new Instruction("FDE3", "EX (SP),IY", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 4, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 5, false) }));
                instructions.Add(new Instruction("FDE5", "PUSH IY", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackWriteHigh, 3, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false) }));
                instructions.Add(new Instruction("FDE9", "JP IY", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDF9", "LD SP,IY", ArgumentType.None, ArgumentType.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("DDCB06", "RLC (IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB0E", "RRC (IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB16", "RL (IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB1E", "RR (IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB26", "SLA (IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB2E", "SRA (IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB3E", "SRL (IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB46", "BIT 0,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB4E", "BIT 1,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB56", "BIT 2,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB5E", "BIT 3,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB66", "BIT 4,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB6E", "BIT 5,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB76", "BIT 6,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB7E", "BIT 7,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB86", "RES 0,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB8E", "RES 1,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB96", "RES 2,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB9E", "RES 3,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBA6", "RES 4,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBAE", "RES 5,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBB6", "RES 6,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBBE", "RES 7,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBC6", "SET 0,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBCE", "SET 1,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBD6", "SET 2,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBDE", "SET 3,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBE6", "SET 4,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBEE", "SET 5,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBF6", "SET 6,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBFE", "SET 7,(IX+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB06", "RLC (IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB0E", "RRC (IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB16", "RL (IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB1E", "RR (IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB26", "SLA (IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB2E", "SRA (IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB3E", "SRL (IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB46", "BIT 0,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB4E", "BIT 1,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB56", "BIT 2,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB5E", "BIT 3,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB66", "BIT 4,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB6E", "BIT 5,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB76", "BIT 6,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB7E", "BIT 7,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB86", "RES 0,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB8E", "RES 1,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB96", "RES 2,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB9E", "RES 3,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBA6", "RES 4,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBAE", "RES 5,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBB6", "RES 6,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBBE", "RES 7,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBC6", "SET 0,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBCE", "SET 1,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBD6", "SET 2,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBDE", "SET 3,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBE6", "SET 4,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBEE", "SET 5,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBF6", "SET 6,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBFE", "SET 7,(IY+o)", ArgumentType.Displacement, ArgumentType.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                #endregion

                foreach (Instruction instruction in instructions)
                {
                    Instructions.Add(instruction.FullOpcode, instruction);
                    InstructionsByMnemonic.Add(instruction.Mnemonic, instruction);
                }
            }
        }

        static InstructionSet()
        {
        }
    }
}
